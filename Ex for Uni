#include <iostream>
#include <cmath>
#include <algorithm>
#include <sstream>
#include <ctype.h>
#include <fstream>
#include <cstring>
#include <string>
#include <vector>
#include <unordered_map>
#pragma warning(disable : 4996)

using namespace std;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void calc()                                                                 //1 Exercise 
{
    char sy;
    double f, s;
    cout << "1 variable, 2 variable, action(+,-,*,/): ";
    cin >> f >> s >> sy;
    if (!f)
    {
        cout << "Error the first variable is incorrect\n";
        cin.clear();
        cin.ignore(256, '\n');
        cin >> f >> s >> sy;
    }
    if (!s)
    {
        cout << "Error the second variable is incorrect\n";
        cin.clear();
        cin.ignore(256, '\n');
        cin >> f >> s >> sy;
    }
    if (((sy) == !(sy)) || ((sy != '+') && (sy != '-') && (sy != '*') && (sy != '/')))
    {
        cout << "Error the action is incorrect\n";
        cin.clear();
        cin.ignore(256, '\n');
        cin >> f >> s >> sy;
    }

    switch (sy)
    {
    case '+':
    {
        cout << "Answer:" << f + s << "\n";
        break;
    }
    case '-':
    {
        cout << "Answer:" << f - s << "\n";
        break;
    }
    case '*':
    {
        cout << "Answer:" << f * s << "\n";
        break;
    }
    case '/':
    {
        if (s == 0)
        {
            cout << "Error, it is impossible to divide by zero\n";
            exit(1);
        }
        else
        {
            cout << "Answer:" << f / s << "\n";
            break;
        }
    }
    }
    system("pause");
}

void check_an_empty_string()
{
    while (int a = 1 != 0)
    {
        cout << "Enter any character other than the input to go to the calculator the input will exit the program\n";
        cin.ignore(256, '\n');
        while ((cin.get() != '\n'))
        {
            calc();
        }
        cout<< "Enter any character other than the input to go to the calculator the input will exit the program\n";
        while ((cin.get() == '\n'))
        {
            cout<< "Empty string\n";
            exit(1);
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void str_in_uppercase()                                                        //2 Exercise
{
    string strb;
    cout << "Enter the string\n";
    cin >> strb;
    for (int i = 0; i < strb.size(); i++)
    {
        strb[i] = toupper(strb[i]);
    }
    cout << strb << "\n";
}

void str_in_lowercase()
{
    string strb;
    cout << "Enter the string\n";
    cin >> strb;
    for (int i = 0; i < strb.size(); i++)
    {
        strb[i] = tolower(strb[i]);
    }
    cout << strb << "\n";
}

void conkatination()
{
    string strinput, srtconc;
    char str = '0';
    int a = 0;
    while (a != 2)
    {
        cout << "Enter the string or 0 to get an answer\n";
        cin >> strinput;
        if (strinput[a] == str)
        {
            a = 2;
            strinput = '\n';
        }
        srtconc = srtconc + strinput;
    }
    cout << "Answer:" << srtconc << "\n";
}

void output_in_file()
{
    string str;
    ofstream fileout;
    int a = 0;

    fileout.open("fileout.txt");
    while (a != 2)
    {
        cout << "Enter the string or 0 to finish\n";
        cin >> str;
        if (str[a] == '0')
        {
            a = 2;
            str = '\n';
        }
        fileout << str <<"\n";
    }
    cout << "File name fileout.txt\n";
    fileout.close();
}

void read_from_file() 
{
    char str[256];
    ifstream fileread;
    if(fileread.is_open())
    {
        cout << "The file created in task 4 is opened\n";
        fileread.open("fileout.txt");
        fileread.getline(str, 256, '\n');
        cout << str << "\n";
    }
    else
    {
        cout << "File not created in task 4, please create it \n";
        exit(1);
    }
    fileread.close();
}

void choose_in_second_exercise()
{
    int choose1, choose2, a = 0;
    while (a != 1)
    {
        cout << "What do you want to do?\n1)Exit to the task menu\n2)Convert case\n3)Concatenate strings\n4)Output strings to a file\n5)Read from an arbitrary file\n";
        cin >> choose1;
        switch (choose1)
        {
        case 1:
        {
            a = 1;
            break;
        }
        case 2:
        {
            while (a != 3)
            {
                cout << "What case do you want to convert to?\n1)To upper\n2)To lower\n3)Exit\n";
                cin >> choose2;
                switch (choose2)
                {
                case 1:
                {
                    str_in_uppercase();
                    break;
                }
                case 2:
                {
                    str_in_lowercase();
                    break;
                }
                case 3:
                {
                    a = 3;
                    break;
                }
                default:
                {
                    cout << "Error, please try again\n";
                    break;
                }
                }
            }
            break;
        }
        case 3:
        {
            conkatination();
            break;
        }
        case 4:
        {
            output_in_file();
            break;
        }
        case 5:
        {
            read_from_file();
            break;
        }
        default:
        {
            cout << "Error, please try again\n";
            break;
        }
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
unordered_map < string, int > common_word()                                            //3 Exercise
{
    unordered_map < string, int > search;
    char* wor;
    string str;

    getline(cin, str);
    cout << "\n";
    for (int i = 0; i < str.size(); i++)
    {
        str[i] = tolower(str[i]);
    }
    char* countstr = &str[0];
    char* ysl = strtok(countstr, " ");
    while (ysl != NULL)
    {
        search[string(ysl)]++;
        ysl = strtok(NULL, " ");
    }
    return search;
}
void search_common_word()
{
    cout << "Enter text :\n";

    unordered_map < string, int > search = common_word();
    int cword = 0;
    string word = "\0";
    for (const auto& lost : search)
    {
        if (lost.second > cword)
        {
            cword = lost.second;
            word = lost.first;
        }
    }
    cout << "Most common word : " << word << "\n";
    cout << "Quantity of words encountered: " << cword + 1 << "\n";
    system("pause");
}

void choose_exercise()
{
    int z;
    cout << "Choose exercise\n1)Calc\n2)Working with strings\n3)Word search\n";
    cin >> z;
    while (z)
    {
        switch (z)
        {
        case 1:
        {
            check_an_empty_string();
            cout << "Choose exercise\n1)Calc\n2)Working with strings\n3)Word search\n";
            cin >> z;
            break;
        }
        case 2:
        {
            choose_in_second_exercise();
            cout << "Choose exercise\n1)Calc\n2)Working with strings\n3)Word search\n";
            cin >> z;
            break;
        }
        case 3:
        {
            common_word();
            search_common_word();
            cout << "Choose exercise\n1)Calc\n2)Working with strings\n3)Word search\n";
            cin >> z;
            break;
        }
        default:
            cout << "Error, please try again\n";
            exit(1);
        }
    }
}

int main()
{
    choose_exercise();
	return 0;
}
